{"version":3,"sources":["components/Todo/TodoContext.js","components/Todo/AddTodo.js","components/Todo/Todo.js","components/Todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","_useState","useState","id","title","completed","_useState2","Object","slicedToArray","todos","setTodos","react_default","a","createElement","Provider","value","children","formStyle","textAlign","AddTodo","setTitle","_useContext","useContext","_useContext2","onSubmit","e","preventDefault","concat","toConsumableArray","style","type","name","placeholder","onChange","target","Todo","map","todo","className","onClick","filter","TodoList","index","components_Todo_Todo","key","App","TodoContext_TodoProvider","Todo_TodoList","Todo_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAEaA,EAAcC,0BAEdC,EAAe,SAACC,GAAU,IAAAC,EACTC,mBAAS,CAC/B,CACIC,GAAI,EACJC,MAAO,kBACPC,WAAW,GAEf,CACIF,GAAI,EACJC,MAAO,wBACPC,WAAW,GAEf,CACIF,GAAI,EACJC,MAAO,0CACPC,WAAW,KAfgBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAC5BQ,EAD4BH,EAAA,GACrBI,EADqBJ,EAAA,GAmBnC,OACIK,EAAAC,EAAAC,cAAChB,EAAYiB,SAAb,CAAsBC,MAAO,CAACN,EAAOC,IAChCV,EAAMgB,kBCJbC,EAAY,CACdC,UAAW,UAGAC,EAvBC,WAAM,IAAAlB,EACUC,mBAAS,IADnBI,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACVG,EADUE,EAAA,GACHc,EADGd,EAAA,GAAAe,EAEUC,qBAAYzB,GAFtB0B,EAAAhB,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAEVZ,EAFUc,EAAA,GAEHb,EAFGa,EAAA,GAYlB,OACIZ,EAAAC,EAAAC,cAAA,QAAMW,SANM,SAAAC,GACZA,EAAEC,iBACFhB,EAAQ,GAAAiB,OAAApB,OAAAqB,EAAA,EAAArB,CAAME,GAAN,CAAa,CAAEN,GAAI,EAAGC,MAAOA,EAAOC,WAAW,MACvDe,EAAS,KAGgBS,MAAOZ,GAC5BN,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOC,KAAK,QAAQC,YAAY,cAAcjB,MAAOX,EAAO6B,SAX5D,SAACR,GACjBL,EAASK,EAAES,OAAOnB,YC0BXoB,EA7BF,SAACnC,GAAU,IAAAqB,EACQC,qBAAYzB,GADpB0B,EAAAhB,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GACZZ,EADYc,EAAA,GACLb,EADKa,EAAA,GAkBpB,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,WAAWC,KAAK,aAAaE,SAlBhC,WACjBvB,EAASD,EAAM2B,IAAI,SAAAC,GAIf,OAHIA,EAAKlC,KAAOH,EAAMG,KAClBkC,EAAKhC,WAAagC,EAAKhC,WAEpBgC,QAcFrC,EAAMI,OAEXO,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,cAAcC,QAZnB,WACf7B,EAASD,EAAM+B,OAAO,SAACH,GACnB,OAAOA,EAAKlC,KAAOH,EAAMG,QAUzB,YCXGsC,EAXE,WAAM,IAAApB,EACOC,qBAAWzB,GADlB0B,EAAAhB,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GACZZ,EADYc,EAAA,GAAAA,EAAA,GAEnB,OACIZ,EAAAC,EAAAC,cAAA,WACKJ,EAAM2B,IAAK,SAACC,EAAMK,GAAP,OACR/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAMC,IAAKF,EAAOtC,MAAOiC,EAAKjC,MAAOD,GAAIkC,EAAKlC,SCW/C0C,MAXf,WACC,OACClC,EAAAC,EAAAC,cAACiC,EAAD,KACCnC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACd3B,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,SCHgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f8099e72.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nexport const TodoProvider = (props) => {\r\n    const [todos, setTodos] = useState([\r\n        {\r\n            id: 1,\r\n            title: 'Learn React Js.',\r\n            completed: false\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Eat burger and pizza.',\r\n            completed: false\r\n        },\r\n        {\r\n            id: 3,\r\n            title: 'Sleep after watching the cricket match.',\r\n            completed: false\r\n        }\r\n    ]);\r\n\r\n    return (\r\n        <TodoContext.Provider value={[todos, setTodos]}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n}","import React, {useState, useContext} from 'react';\r\nimport {TodoContext} from './TodoContext';\r\nconst AddTodo = () => {\r\n    const [ title, setTitle ] = useState('');\r\n    const [ todos, setTodos ] = useContext( TodoContext );\r\n    const updateTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const addTodo = e => {\r\n        e.preventDefault();\r\n        setTodos( [...todos, { id: 4, title: title, completed: false }] );\r\n        setTitle('');\r\n    }\r\n    return(\r\n        <form onSubmit={addTodo} style={formStyle}>\r\n            <input type=\"text\" name=\"title\" placeholder=\"Add todo...\" value={title} onChange={updateTitle}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst formStyle = {\r\n    textAlign: \"center\"\r\n}\r\n\r\nexport default AddTodo;","import React, {useContext} from 'react';\r\nimport {TodoContext} from './TodoContext';\r\n\r\nconst Todo = (props) => {\r\n    const [ todos, setTodos ] = useContext( TodoContext );\r\n\r\n    const todoComplete = () => {\r\n        setTodos(todos.map(todo => {\r\n            if( todo.id === props.id ) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        }));\r\n    }\r\n\r\n    const todoDelete = () => {\r\n        setTodos(todos.filter((todo) => {\r\n            return todo.id !== props.id;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type=\"checkbox\" name=\"check_todo\" onChange={todoComplete} />\r\n                {props.title}\r\n            </label>\r\n            <span className=\"delete-todo\" onClick={todoDelete}>Delete</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, {useContext} from 'react'\r\nimport Todo from './Todo';\r\n\r\n// Context\r\nimport {TodoContext} from './TodoContext';\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useContext(TodoContext);\r\n    return (\r\n        <div>\r\n            {todos.map( (todo, index) => (\r\n                <Todo key={index} title={todo.title} id={todo.id} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n// Providers\r\nimport {TodoProvider} from './components/Todo/TodoContext';\r\n\r\n// Components\r\nimport AddTodo from './components/Todo/AddTodo';\r\nimport TodoList from './components/Todo/TodoList';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<TodoProvider>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<TodoList />\r\n\t\t\t\t<AddTodo />\r\n\t\t\t</div>\r\n\t\t</TodoProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}